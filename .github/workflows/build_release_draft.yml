name: Build and Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022, ubuntu-22.04, macos-13, macos-14] #14 is M1
        python-version: [3.11]

    runs-on: ${{ matrix.os }}

    name: Build ${{ matrix.os }} executable
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        run: pip install poetry
      - name: Update poetry lock file
        run: poetry lock
      - name: Get packages via poetry
        run: poetry install

      - name: Install Playwright Browsers
        run: poetry run playwright install --with-deps

      - name: Get CVAmp version number
        uses: SebRollen/toml-action@v1.0.0
        id: read_toml
        with:
          file: "pyproject.toml"
          field: "tool.poetry.version"

      - name: Create date and file name env variable
        shell: bash
        run: |
          export today=$(date +'%Y%m%d')
          echo "output_filename=CVAmp_v${{steps.read_toml.outputs.value}}_${today}_${{runner.os}}-${{runner.arch}}" >> $GITHUB_ENV

      - name: Build Windows executable
        if: matrix.os == 'windows-2022'
        shell: pwsh
        run: |
          # Copy browsers to a local folder to ensure the path is correct for PyInstaller
          $source_browsers = "$env:LOCALAPPDATA/ms-playwright"
          $dest_browsers = "./ms-playwright-temp"
          Copy-Item -Path $source_browsers -Destination $dest_browsers -Recurse

          # Build the executable, adding the local browser copy
          poetry run pyinstaller main_gui.py --onefile --add-data "$dest_browsers;ms-playwright" --add-binary "cvamp_logo.ico;." --add-binary "pyproject.toml;." --icon cvamp_logo.ico --name ${{env.output_filename}}
          
          if (Test-Path -Path ./proxy) {
            Move-Item -Path ./proxy -Destination ./dist/
          }

      - name: Build Linux/macOS executable
        if: matrix.os != 'windows-2022'
        shell: bash
        run: |
          PYINSTALLER_EXTRA_OPTS=""
          # Determine source browser path and copy to a local folder
          if [ "$RUNNER_OS" == "Linux" ]; then
            source_browsers="$HOME/.cache/ms-playwright"
          else # macOS
            source_browsers="$HOME/Library/Caches/ms-playwright"
            PYINSTALLER_EXTRA_OPTS="--no-codesign"
          fi
          cp -r "$source_browsers" "./ms-playwright-temp"

          # Build the executable, adding the local browser copy and extra options for macOS
          poetry run pyinstaller main_gui.py --onefile $PYINSTALLER_EXTRA_OPTS --add-data "./ms-playwright-temp:ms-playwright" --add-binary "cvamp_logo.ico:." --hidden-import=tkinter --add-binary "pyproject.toml:." --icon cvamp_logo.ico --name ${{env.output_filename}}.bin
          
          if [ -d "./proxy/" ]; then
              mv ./proxy/ ./dist/
          fi

      - name: Zip executable
        uses: vimtor/action-zip@v1
        with:
          files: dist/
          dest: ${{env.output_filename}}.zip

      - name: Upload zipped artifact ${{ matrix.os }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.output_filename}}
          path: ${{env.output_filename}}.zip

  draft_release:
    needs: build
    runs-on: ubuntu-latest

    name: Draft one big release
    steps:
      - uses: actions/checkout@v3
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create draft release with artifacts
        uses: softprops/action-gh-release@v1
        with:
          name: CVAmp ${{github.ref_name}}
          body_path: docs/release_template_text.md
          prerelease: false
          draft: true
          files: artifacts/**/*.zip # glob pattern which will match all zip files in any subdirectory of artifacts.
