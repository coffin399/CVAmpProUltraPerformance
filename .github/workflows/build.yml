name: Build and Test

on: [pull_request]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: [3.11]

    runs-on: ${{ matrix.os }}

    name: Build ${{ matrix.os }} executable
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install poetry
      run: pip install poetry
    - name: Update poetry lock file
      run: poetry lock
    - name: Get packages via poetry
      run: poetry install

    - name: Install Playwright Browsers
      run: poetry run playwright install --with-deps

    - name: Get CVAmp version number
      uses: SebRollen/toml-action@v1.0.0
      id: read_toml
      with:
        file: 'pyproject.toml'
        field: 'tool.poetry.version'

    - name: Create date and file name env variable
      shell: bash
      run: |
        export today=$(date +'%Y%m%d')
        if [ "$RUNNER_OS" == "Windows" ]; then
          echo "output_filename=CVAmp${{steps.read_toml.outputs.value}}_${today}_${{runner.os}}-${{runner.arch}}" >> $GITHUB_ENV
        else
          echo "output_filename=CVAmp${{steps.read_toml.outputs.value}}_${today}_${{runner.os}}-${{runner.arch}}_experimental" >> $GITHUB_ENV
        fi

    - name: Build Windows executable
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Copy browsers to a local folder to ensure the path is correct for PyInstaller
        $source_browsers = "$env:LOCALAPPDATA/ms-playwright"
        $dest_browsers = "./ms-playwright-temp"
        Copy-Item -Path $source_browsers -Destination $dest_browsers -Recurse

        # Build the executable, adding the local browser copy
        poetry run pyinstaller main_gui.py --onefile --add-data "$dest_browsers;ms-playwright" --add-binary "cvamp_logo.ico;." --add-binary "pyproject.toml;." --icon cvamp_logo.ico --name ${{env.output_filename}}
        
        if (Test-Path -Path ./proxy) {
          Move-Item -Path ./proxy -Destination ./dist/
        }

    - name: Build Linux executable
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        source_browsers="$HOME/.cache/ms-playwright"
        cp -r "$source_browsers" "./ms-playwright-temp"
        poetry run pyinstaller main_gui.py --onefile --add-data "./ms-playwright-temp:ms-playwright" --add-binary "cvamp_logo.ico:." --hidden-import=tkinter --add-binary "pyproject.toml:." --icon cvamp_logo.ico --name ${{env.output_filename}}.bin

        if [ -d "./proxy/" ]; then
            mv ./proxy/ ./dist/
        fi

    - name: Build macOS executable
      if: matrix.os == 'macos-latest'
      shell: bash
      run: |
        source_browsers="$HOME/Library/Caches/ms-playwright"
        cp -r "$source_browsers" "./ms-playwright-temp"
        
        # Clear PyInstaller cache to avoid issues with cached signed binaries
        rm -rf "$HOME/Library/Application Support/pyinstaller" || true
        
        # Remove executable permissions and signatures from browser binaries
        find ./ms-playwright-temp -type f \( -name "Chromium" -o -name "firefox" -o -perm +111 \) -exec chmod -x {} \; 2>/dev/null || true
        find ./ms-playwright-temp -type f \( -name "*.dylib" -o -name "*.so" \) -exec codesign --remove-signature {} \; 2>/dev/null || true
        
        poetry run pyinstaller main_gui.py --onefile --add-data "./ms-playwright-temp:ms-playwright" --add-binary "cvamp_logo.ico:." --hidden-import=tkinter --add-binary "pyproject.toml:." --icon cvamp_logo.ico --name ${{env.output_filename}}.bin

        if [ -d "./proxy/" ]; then
            mv ./proxy/ ./dist/
        fi

    - name: Zip executable
      uses: vimtor/action-zip@v1
      with:
        files: dist/
        dest: ${{env.output_filename}}.zip

    - name: Upload zipped artifact ${{ matrix.os }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.output_filename}}
        path: ${{env.output_filename}}.zip